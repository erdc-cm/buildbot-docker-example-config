
# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.# -*- python -*-
# ex: set filetype=python:

import os

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

c['workers'] = [worker.Worker("debian_jessie_worker", os.environ.get('BUILDBOT_WORKER_SECRET')),
                worker.Worker("Ubuntu_14_04_worker", os.environ.get('BUILDBOT_WORKER_SECRET')),	
                worker.Worker("Ubuntu_16_04_worker", os.environ.get('BUILDBOT_WORKER_SECRET')),
                worker.Worker("Ubuntu_16_10_worker", os.environ.get('BUILDBOT_WORKER_SECRET'))]

if 'BUILDBOT_MQ_URL' in os.environ:
    c['mq'] = {
        'type' : 'wamp',
        'router_url': os.environ['BUILDBOT_MQ_URL'],
        'realm': os.environ.get('BUILDBOT_MQ_REALM', 'buildbot').decode('utf-8'),
        'debug' : 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_websockets' : 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_lowlevel' : 'BUILDBOT_MQ_DEBUG' in os.environ,
    }
# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': os.environ.get("BUILDBOT_WORKER_PORT", 9989)}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
#c['change_source'].append(changes.GitPoller(
#        'git://github.com/erdc-cm/proteus.git',
#        workdir='gitpoller-workdir', 
#        branch='buildbot_testing',
#        project='proteus',
#        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].append(schedulers.Nightly(name='nightly',
                       branch='master',
                       builderNames=['debian_jessie', 'Ubuntu_14.04','Ubuntu_16.04', 'Ubuntu_16.10'],
                       hour=3, minute=0))
master=schedulers.SingleBranchScheduler(
                            name="all",
                            change_filter=util.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=['debian_jessie', 'Ubuntu_14.04', "Ubuntu_16.04", "Ubuntu_16.10"])
c['schedulers'].append(master)
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=['debian_jessie', "Ubuntu_14.04", "Ubuntu_16.04", "Ubuntu_16.10"]))

package = schedulers.Dependent(name="make-doc",
                               upstream=master, # <- no quotes!
			       builderNames=["make-doc"])
####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

factory = util.BuildFactory()
# check out the source
factory.addStep(steps.Git(repourl='http://github.com/erdc-cm/proteus.git', mode='incremental', branch='master'))
# run the tests (note that this will require that 'trial' is installed)
factory.addStep(steps.ShellCommand(command=["make", "default_stack"],timeout=12000))
factory.addStep(steps.ShellCommand(command=["make", "distclean"],timeout=12000))
factory.addStep(steps.ShellCommand(command=["make", "install"],timeout=12000))
factory.addStep(steps.ShellCommand(command=["./hashdist/bin/hit", "push", "src", "--objects=source"],timeout=12000))
factory.addStep(steps.ShellCommand(command=["./hashdist/bin/hit", "push", "bld", "--objects=build"],timeout=12000))
factory.addStep(steps.ShellCommand(command=["git", "lfs", "fetch"],timeout=12000))
factory.addStep(steps.ShellCommand(command=["git", "lfs", "checkout"],timeout=12000))
factory.addStep(steps.ShellCommand(command=["make", "test"],timeout=12000))

import copy
factory_plus_docs = copy.deepcopy(factory)
factory_plus_docs.addStep(steps.ShellCommand(command=["git", "checkout","-b","gh-pages"],timeout=12000))
factory_plus_docs.addStep(steps.ShellCommand(command=["git", "checkout-index","-a","-f","--prefix=../proteus-website/"],timeout=12000))
factory_plus_docs.addStep(steps.ShellCommand(command=["make", "doc"],timeout=12000))

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="debian_jessie",
                       workernames=["debian_jessie_worker"],
		       env={ 'PATH' : '${PROTEUS_PATH}:${PATH}',
		             'FC' : 'gfortran'},
                       factory=factory_plus_docs))
c['builders'].append(
    util.BuilderConfig(name="Ubuntu_14.04",
                       workernames=["Ubuntu_14_04_worker"],
		       env={ 'PATH' : '${PROTEUS_PATH}:${PATH}',
                             'FC': 'gfortran'},
                       factory=factory))
c['builders'].append(
    util.BuilderConfig(name="Ubuntu_16.04",
                       workernames=["Ubuntu_16_04_worker"],
		       env={ 'PATH' : '${PROTEUS_PATH}:${PATH}',
                             'FC': 'gfortran'},
                       factory=factory))
c['builders'].append(
    util.BuilderConfig(name="Ubuntu_16.10",
                       workernames=["Ubuntu_16_10_worker"],
		       env={ 'PATH' : '${PROTEUS_PATH}:${PATH}',
                             'FC': 'gfortran'},
                       factory=factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# like IRC bots.

c['status'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Proteus"
c['titleURL'] = "http://proteustoolkit.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = os.environ.get("BUILDBOT_WEB_URL", "http://mistral.hrwallingford.com:8080")

# minimalistic config to activate new web UI
c['www'] = dict(port=os.environ.get("BUILDBOT_WEB_PORT", 8080),
                plugins=dict(waterfall_view={}, console_view={}),
                change_hook_dialects={
                    'github': {
                        'secret': os.environ.get('GITHUB_CLIENT_SECRET'),
                        'strict': True
                    }
                }
            )

from buildbot.plugins import *
authz = util.Authz(
  allowRules=[
    util.AnyEndpointMatcher(role="erdc-cm", defaultDeny=True)
  ],
  roleMatchers=[
    util.RolesFromGroups()
  ]
)

auth=util.GitHubAuth(os.environ.get('GITHUB_CLIENT_ID'), os.environ.get('GITHUB_CLIENT_SECRET'))
c['www']['auth'] = auth
c['www']['authz'] = authz

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : os.environ.get("BUILDBOT_DB_URL", "sqlite://").format(**os.environ),
}
